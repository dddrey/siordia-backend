import { PrismaClient, ContentType } from "@prisma/client";
import { addDays, endOfDay, startOfDay } from "date-fns";

const prisma = new PrismaClient();

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
 * - player: –∏—Å—Ç–µ–∫–∞—é—Ç —Å–µ–≥–æ–¥–Ω—è
 * - coach: –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
 * - parent: –∏—Å—Ç–µ–∫–∞—é—Ç –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
 */
async function createTestSubscriptions() {
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...");

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
      select: {
        id: true,
        username: true,
        isActive: true,
      },
    });

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    if (users.length === 0) {
      console.log(
        "‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
      );

      const testUser = await prisma.user.create({
        data: {
          username: `test_user_${Date.now()}`,
          chatId: `test_chat_${Date.now()}`,
          isActive: true,
        },
      });

      users.push({
        id: testUser.id,
        username: testUser.username,
        isActive: testUser.isActive,
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.username}`);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
    const today = endOfDay(new Date());
    const tomorrow = endOfDay(addDays(new Date(), 1));
    const dayAfterTomorrow = endOfDay(addDays(new Date(), 2));
    const startDate = startOfDay(new Date());

    console.log("üìÖ –î–∞—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫:");
    console.log(`   –°–µ–≥–æ–¥–Ω—è (player): ${today.toLocaleString()}`);
    console.log(`   –ó–∞–≤—Ç—Ä–∞ (coach): ${tomorrow.toLocaleString()}`);
    console.log(
      `   –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (parent): ${dayAfterTomorrow.toLocaleString()}`
    );

    let createdCount = 0;
    let updatedCount = 0;

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users) {
      console.log(
        `\nüë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username} (${user.id})`
      );

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Ç–∏–ø–æ–≤
      const subscriptionTypes: Array<{
        type: ContentType;
        endDate: Date;
        description: string;
      }> = [
        {
          type: ContentType.player,
          endDate: today,
          description: "–∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è",
        },
        {
          type: ContentType.coach,
          endDate: tomorrow,
          description: "–∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞",
        },
        {
          type: ContentType.parent,
          endDate: dayAfterTomorrow,
          description: "–∏—Å—Ç–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞",
        },
      ];

      for (const { type, endDate, description } of subscriptionTypes) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
          const existingSubscription = await prisma.subscription.findFirst({
            where: {
              userId: user.id,
              type,
              active: true,
            },
          });

          if (existingSubscription) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            await prisma.subscription.update({
              where: { id: existingSubscription.id },
              data: {
                endDate,
                startDate,
              },
            });
            updatedCount++;
            console.log(`   ‚úèÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ${type} (${description})`);
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            await prisma.subscription.create({
              data: {
                userId: user.id,
                type,
                startDate,
                endDate,
                active: true,
              },
            });
            createdCount++;
            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ${type} (${description})`);
          }
        } catch (error) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${type}:`, error);
        }
      }
    }

    console.log("\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${createdCount}`);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${updatedCount}`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    console.log("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:");
    const allSubscriptions = await prisma.subscription.findMany({
      where: {
        active: true,
      },
      include: {
        user: {
          select: {
            username: true,
          },
        },
      },
      orderBy: [{ endDate: "asc" }, { type: "asc" }],
    });

    allSubscriptions.forEach((subscription) => {
      const daysUntilExpiry = Math.ceil(
        (subscription.endDate.getTime() - new Date().getTime()) /
          (1000 * 60 * 60 * 24)
      );

      let status = "";
      if (daysUntilExpiry < 0) {
        status = "‚ùå –ü–†–û–°–†–û–ß–ï–ù–ê";
      } else if (daysUntilExpiry === 0) {
        status = "‚ö†Ô∏è  –ò–°–¢–ï–ö–ê–ï–¢ –°–ï–ì–û–î–ù–Ø";
      } else if (daysUntilExpiry === 1) {
        status = "üîî –ò–°–¢–ï–ö–ê–ï–¢ –ó–ê–í–¢–†–ê";
      } else {
        status = `‚úÖ –û—Å—Ç–∞–ª–æ—Å—å ${daysUntilExpiry} –¥–Ω–µ–π`;
      }

      console.log(
        `   ${subscription.user.username} | ${subscription.type} | ${subscription.endDate.toLocaleDateString()} | ${status}`
      );
    });

    console.log("\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
  } catch (error) {
    console.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∑–∞–≤—Ç—Ä–∞
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ 10 —É—Ç—Ä–∞
 */
async function checkExpiringSubscriptions() {
  try {
    console.log("\nüîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∑–∞–≤—Ç—Ä–∞...");

    const tomorrow = endOfDay(addDays(new Date(), 1));
    const tomorrowStart = startOfDay(addDays(new Date(), 1));

    const expiringSubscriptions = await prisma.subscription.findMany({
      where: {
        active: true,
        endDate: {
          gte: tomorrowStart,
          lte: tomorrow,
        },
      },
      include: {
        user: {
          select: {
            username: true,
            chatId: true,
          },
        },
      },
    });

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∑–∞–≤—Ç—Ä–∞: ${expiringSubscriptions.length}`
    );

    if (expiringSubscriptions.length > 0) {
      console.log("‚ö†Ô∏è  –ü–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞:");
      expiringSubscriptions.forEach((subscription) => {
        console.log(
          `   üë§ ${subscription.user.username} | ${subscription.type} | ${subscription.endDate.toLocaleString()}`
        );
      });

      console.log("\nüí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞–≤—Ç—Ä–∞ –≤ 10:00!");
    } else {
      console.log("‚úÖ –ü–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∑–∞–≤—Ç—Ä–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:", error);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  try {
    await createTestSubscriptions();
    await checkExpiringSubscriptions();
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

export { createTestSubscriptions, checkExpiringSubscriptions };
