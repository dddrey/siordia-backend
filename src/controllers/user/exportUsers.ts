import { asyncHandler } from "@/middleware/asyncHandler";
import { Request, Response } from "express";
import { prisma } from "@/prisma/prismaClient";
import { ValidationError } from "@/utils/errors/AppError";
import * as XLSX from "xlsx";
import bot from "@/bot/core";
import { InputFile } from "grammy";

export const exportUsers = asyncHandler(async (req: Request, res: Response) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∞–¥–º–∏–Ω–∞ –µ—Å—Ç—å chatId –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
  if (!req.user?.chatId) {
    throw new ValidationError("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç chatId –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞");
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await prisma.user.findMany({
    include: {
      subscriptions: {
        where: {
          active: true,
        },
        select: {
          id: true,
          type: true,
          startDate: true,
          endDate: true,
        },
      },
    },
    orderBy: {
      createdAt: "desc",
    },
  });

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
  const excelData = users.map((user, index) => {
    const activeSubscriptions = user.subscriptions
      .map((sub) => sub.type)
      .join(", ");
    const subscriptionEndDates = user.subscriptions
      .map((sub) => new Date(sub.endDate).toLocaleDateString("ru-RU"))
      .join(", ");

    return {
      "‚Ññ": index + 1,
      "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": user.id,
      "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": user.username,
      –ê–¥–º–∏–Ω: user.isAdmin ? "–î–∞" : "–ù–µ—Ç",
      –ê–∫—Ç–∏–≤–µ–Ω: user.isActive ? "–î–∞" : "–ù–µ—Ç",
      "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": user.registrationDate
        ? new Date(user.registrationDate).toLocaleDateString("ru-RU")
        : "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
      "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": new Date(user.createdAt).toLocaleDateString("ru-RU"),
      "Chat ID": user.chatId || "–ù–µ —É–∫–∞–∑–∞–Ω",
      "URL –∞–≤–∞—Ç–∞—Ä–∞": user.avatarUrl || "–ù–µ —É–∫–∞–∑–∞–Ω",
      "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏": activeSubscriptions || "–ù–µ—Ç",
      "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫": subscriptionEndDates || "–ù–µ—Ç",
      "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫": user.subscriptions.length,
    };
  });

  // –°–æ–∑–¥–∞–µ–º workbook –∏ worksheet
  const workbook = XLSX.utils.book_new();
  const worksheet = XLSX.utils.json_to_sheet(excelData);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const columnWidths = [
    { wch: 5 }, // ‚Ññ
    { wch: 20 }, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    { wch: 25 }, // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    { wch: 8 }, // –ê–¥–º–∏–Ω
    { wch: 8 }, // –ê–∫—Ç–∏–≤–µ–Ω
    { wch: 18 }, // –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    { wch: 18 }, // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    { wch: 15 }, // Chat ID
    { wch: 30 }, // URL –∞–≤–∞—Ç–∞—Ä–∞
    { wch: 20 }, // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    { wch: 25 }, // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
    { wch: 15 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫
  ];

  worksheet["!cols"] = columnWidths;

  // –î–æ–±–∞–≤–ª—è–µ–º worksheet –≤ workbook
  XLSX.utils.book_append_sheet(workbook, worksheet, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏");

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä Excel —Ñ–∞–π–ª–∞
  const excelBuffer = XLSX.write(workbook, {
    type: "buffer",
    bookType: "xlsx",
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
  const fileName = `users_export_${new Date().toISOString().split("T")[0]}.xlsx`;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
    await bot.api.sendDocument(
      Number(req.user.chatId),
      new InputFile(excelBuffer, fileName),
      {
        caption:
          `üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
          `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleDateString("ru-RU")}\n` +
          `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n` +
          `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${users.filter((u) => u.isActive).length}\n` +
          `üîê –ê–¥–º–∏–Ω–æ–≤: ${users.filter((u) => u.isAdmin).length}\n` +
          `üì± –° –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: ${users.filter((u) => u.subscriptions.length > 0).length}`,
        parse_mode: "HTML",
      }
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      message: "Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram",
      data: {
        totalUsers: users.length,
        activeUsers: users.filter((u) => u.isActive).length,
        adminUsers: users.filter((u) => u.isAdmin).length,
        usersWithSubscriptions: users.filter((u) => u.subscriptions.length > 0)
          .length,
        fileName,
        exportDate: new Date().toISOString(),
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:", error);
    throw new ValidationError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞");
  }
});
