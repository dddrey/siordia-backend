import { Bot } from "grammy";
import dotenv from "dotenv";
import { createOrUpdateSubscription } from "@/services/subscription.service";
import { startText, helpText, aboutText } from "../utils/text";
import { prisma } from "@/prisma/prismaClient";
import { BroadcastService } from "../broadcast/broadcast-service";

dotenv.config();

if (!process.env.BOT_TOKEN || !process.env.APP_URL) {
  throw new Error("BOT_TOKEN or APP_URL is not set");
}

const bot = new Bot(process.env.BOT_TOKEN!);

// –°–æ–∑–¥–∞–µ–º instance BroadcastService
export const broadcastService = new BroadcastService(bot);

bot.command("start", async (ctx) => {
  await ctx.reply(startText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "App", web_app: { url: process.env.APP_URL! } }],
      ],
    },
  });

  let user = await prisma.user.findUnique({
    where: { id: ctx.from?.id.toString() },
    include: {
      subscriptions: true,
    },
  });

  if (!user) {
    user = await prisma.user.create({
      data: {
        id: ctx.from?.id.toString(),
        username: ctx.from?.username || "",
        chatId: ctx.from?.id.toString(),
      },
      include: {
        subscriptions: true,
      },
    });
  }
  if (!user.chatId) {
    await prisma.user.update({
      where: { id: ctx.from?.id.toString() },
      data: { chatId: ctx.from?.id.toString() },
    });
  }
});

bot.command("help", async (ctx) => {
  await ctx.reply(helpText);
});

bot.command("about", async (ctx) => {
  await ctx.reply(aboutText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "App", web_app: { url: process.env.APP_URL! } }],
      ],
    },
  });
});

bot.on("pre_checkout_query", async (ctx) => {
  await ctx.answerPreCheckoutQuery(true);
});

bot.on("message", async (ctx) => {
  console.log(ctx.message);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
  const photo = ctx.message?.photo;
  const video = ctx.message?.video;

  if (!photo && !video) {
    return; // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
  const user = await prisma.user.findUnique({
    where: { id: ctx.from?.id.toString() },
  });

  if (!user || !user.isAdmin) {
    return;
  }

  try {
    let fileId: string;
    let fileType: string;

    if (photo) {
      // –î–ª—è —Ñ–æ—Ç–æ –±–µ—Ä—ë–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞)
      fileId = photo[photo.length - 1].file_id;
      fileType = "—Ñ–æ—Ç–æ";
    } else {
      // –î–ª—è –≤–∏–¥–µ–æ –±–µ—Ä—ë–º file_id
      fileId = video!.file_id;
      fileType = "–≤–∏–¥–µ–æ";
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const fileInfo = await ctx.api.getFile(fileId);
    const filePath = fileInfo.file_path;
    const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${filePath}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∏ file_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –∏ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    await ctx.reply(
      `‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
        `üìÅ –¢–∏–ø: ${fileType}\n` +
        `üÜî File ID –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: \`${fileId}\`\n` +
        `üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${fileUrl}\n\n` +
        `üí° –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ File ID, –∞ —Å—Å—ã–ª–∫—É - –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.`,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.");
  }
});

bot.on(":successful_payment", async (ctx) => {
  ctx.reply("–í—ã –ø–æ–ª—É—á–∏–ª–∏ Pro –≤–µ—Ä—Å–∏—é");
  if (ctx.update.message?.successful_payment) {
    const parsedData = JSON.parse(
      ctx.update.message?.successful_payment.invoice_payload
    );
    try {
      await createOrUpdateSubscription(
        ctx.from?.id.toString(),
        parsedData.type
      );
    } catch (error) {
      console.error("Error creating subscription:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏");
    }
  }
});

export default bot;
