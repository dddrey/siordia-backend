import { Bot } from "grammy";

import { InlineKeyboard } from "grammy";
import { BroadcastOptions, BroadcastResult, MessageSettings } from "./types";
import { User } from "@prisma/client";

export class BroadcastService {
  private bot: Bot;
  private isRunning: boolean = false;

  constructor(bot: Bot) {
    this.bot = bot;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async broadcast(
    users: User[],
    messageSettings: MessageSettings,
    options: BroadcastOptions = {}
  ): Promise<BroadcastResult> {
    if (this.isRunning) {
      throw new Error(
        "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏."
      );
    }

    this.isRunning = true;

    try {
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      this.validateMessageSettings(messageSettings);
      const result = await this.performBroadcast(
        users,
        messageSettings,
        options
      );
      return result;
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private validateMessageSettings(settings: MessageSettings): void {
    console.log(settings);
    if (!settings.text || settings.text.trim() === "") {
      throw new Error("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
    if (settings.photo && settings.video) {
      throw new Error(
        "–ù–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ - –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ —Å—Å—ã–ª–∫–∞
    if (settings.buttonText && !settings.buttonUrl) {
      throw new Error("–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É");
    }

    if (settings.buttonUrl && !settings.buttonText) {
      throw new Error("–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏");
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if (settings.buttonUrl && !this.isValidUrl(settings.buttonUrl)) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏");
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
   */
  private isValidUrl(url: string): boolean {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
   */
  private createKeyboard(settings: MessageSettings) {
    if (settings.buttonText && settings.buttonUrl) {
      return new InlineKeyboard().url(settings.buttonText, settings.buttonUrl);
    }
    return undefined;
  }

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async sendMessage(
    chatId: number,
    messageSettings: MessageSettings
  ): Promise<void> {
    const keyboard = this.createKeyboard(messageSettings);
    const messageOptions: any = {
      parse_mode: messageSettings.parse_mode,
      disable_web_page_preview: messageSettings.disable_web_page_preview,
      reply_markup: keyboard,
    };

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    if (messageSettings.photo) {
      await this.bot.api.sendPhoto(chatId, messageSettings.photo, {
        caption: messageSettings.text,
        ...messageOptions,
      });
    }
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    else if (messageSettings.video) {
      await this.bot.api.sendVideo(chatId, messageSettings.video, {
        caption: messageSettings.text,
        ...messageOptions,
      });
    }
    // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else {
      await this.bot.api.sendMessage(
        chatId,
        messageSettings.text,
        messageOptions
      );
    }
  }

  /**
   * –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  async sendSimpleMessage(chatId: string, text: string): Promise<void> {
    return this.sendMessage(Number(chatId), { text });
  }

  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  private async performBroadcast(
    users: User[],
    messageSettings: MessageSettings,
    options: BroadcastOptions
  ): Promise<BroadcastResult> {
    const {
      delayMs = 100,
      skipInactive = true,
      retryOnRateLimit = true,
    } = options;

    let successCount = 0;
    let errorCount = 0;
    const errors: string[] = [];

    for (let i = 0; i < users.length; i++) {
      const user = users[i];

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (skipInactive && !user.isActive) {
        continue;
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ chatId
      if (!user.chatId) {
        continue;
      }

      try {
        await this.sendMessage(Number(user.chatId), messageSettings);
        successCount++;

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if (delayMs > 0) {
          await new Promise((resolve) => setTimeout(resolve, delayMs));
        }
      } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 (Too Many Requests)
        if (this.isRateLimitError(error) && retryOnRateLimit) {
          const retryAfter = this.extractRetryAfter(error);

          // –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
          await new Promise((resolve) =>
            setTimeout(resolve, retryAfter * 1000)
          );

          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
          try {
            await this.sendMessage(Number(user.chatId), messageSettings);
            successCount++;
          } catch (secondError) {
            errorCount++;
            const errorMsg = `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${user.username} (${user.chatId}): ${secondError}`;
            errors.push(errorMsg);
          }
        } else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
          errorCount++;
          const errorMsg = `–û—à–∏–±–∫–∞ –¥–ª—è ${user.username} (${user.chatId}): ${error}`;
          errors.push(errorMsg);
        }
      }

      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–∞–µ–º –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—è–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
      if (i % 10 === 0) {
        await new Promise((resolve) => setImmediate(resolve));
      }
    }

    return {
      successCount,
      errorCount,
      totalUsers: users.length,
      errors,
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private isRateLimitError(error: any): boolean {
    return (
      error instanceof Error && error.message.includes("429: Too Many Requests")
    );
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –æ—à–∏–±–∫–∏ rate limit
   */
  private extractRetryAfter(error: any): number {
    if (error instanceof Error) {
      const retryMatch = error.message.match(/retry after (\d+)/);
      return retryMatch ? parseInt(retryMatch[1]) : 10;
    }
    return 10; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
   */
  private isUserBlockedError(error: any): boolean {
    return (
      error instanceof Error &&
      (error.message.includes("blocked") ||
        error.message.includes("user not found") ||
        error.message.includes("chat not found"))
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
   */
  getBroadcastStatus(): boolean {
    return this.isRunning;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
   */
  createReport(result: BroadcastResult): string {
    const report =
      `üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
      `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.successCount}\n` +
      `‚ùå –û—à–∏–±–æ–∫: ${result.errorCount}\n` +
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.totalUsers}`;

    return report;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö
   */
  createErrorReport(errors: string[], maxErrors: number = 10): string {
    if (errors.length === 0) {
      return "";
    }

    if (errors.length <= maxErrors) {
      return `–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n${errors.join("\n")}`;
    } else {
      return `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ (${errors.length}). –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ ${maxErrors}:\n${errors.slice(0, maxErrors).join("\n")}`;
    }
  }
}
