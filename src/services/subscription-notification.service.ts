import { prisma } from "@/prisma/prismaClient";
import { broadcastService } from "@/bot/core";
import { ContentType } from "@prisma/client";
import { addDays, startOfDay, endOfDay, format } from "date-fns";
import { ru } from "date-fns/locale";

export class SubscriptionNotificationService {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async checkExpiringSubscriptions(): Promise<void> {
    console.log("üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...");

    const tomorrow = addDays(new Date(), 1);
    const tomorrowStart = startOfDay(tomorrow);
    const tomorrowEnd = endOfDay(tomorrow);

    try {
      // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞
      const expiringSubscriptions = await prisma.subscription.findMany({
        where: {
          active: true,
          endDate: {
            gte: tomorrowStart,
            lte: tomorrowEnd,
          },
        },
        include: {
          user: true,
        },
      });

      console.log(
        `üìã –ù–∞–π–¥–µ–Ω–æ ${expiringSubscriptions.length} –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫`
      );

      if (expiringSubscriptions.length === 0) {
        console.log("‚úÖ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞");
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      for (const subscription of expiringSubscriptions) {
        if (!subscription.user.chatId) {
          console.log(
            `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${subscription.user.username} –Ω–µ –∏–º–µ–µ—Ç chatId`
          );
          continue;
        }

        if (!subscription.user.isActive) {
          console.log(
            `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${subscription.user.username} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`
          );
          continue;
        }

        try {
          await this.sendExpirationNotification(subscription);
          console.log(
            `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscription.user.username}`
          );
        } catch (error) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscription.user.username}:`,
            error
          );
        }
      }

      console.log("üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:", error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  private async sendExpirationNotification(subscription: any): Promise<void> {
    const subscriptionTypeText = this.getSubscriptionTypeText(
      subscription.type
    );
    const expirationDate = format(subscription.endDate, "d MMMM yyyy", {
      locale: ru,
    });

    const message = `‚è∞ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>

üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${subscriptionTypeText}" –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ - ${expirationDate}!

üí° –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É–∂–µ —Å–µ–≥–æ–¥–Ω—è.

‚öΩÔ∏è –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É!`;

    const messageSettings = {
      text: message,
      parse_mode: "HTML" as const,
      disable_web_page_preview: true,
      buttonText: "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
      buttonUrl: process.env.MINI_APP_URL || "https://your-app-url.com",
    };

    await broadcastService.sendMessage(
      Number(subscription.user.chatId),
      messageSettings
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  private getSubscriptionTypeText(type: ContentType): string {
    switch (type) {
      case ContentType.player:
        return "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞";
      case ContentType.coach:
        return "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞";
      case ContentType.parent:
        return "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è";
      default:
        return "–ü–æ–¥–ø–∏—Å–∫–∞";
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
   */
  startScheduler(): void {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    this.checkExpiringSubscriptions();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 —É—Ç—Ä–∞
    const checkTime = this.getNextCheckTime();
    console.log(`‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: ${checkTime}`);

    setTimeout(() => {
      this.checkExpiringSubscriptions();
      // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
      setInterval(
        () => {
          this.checkExpiringSubscriptions();
        },
        24 * 60 * 60 * 1000
      ); // 24 —á–∞—Å–∞
    }, this.getMillisecondsUntilNextCheck());
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (10:00 —É—Ç—Ä–∞)
   */
  private getNextCheckTime(): string {
    const now = new Date();
    const nextCheck = new Date();
    nextCheck.setHours(10, 0, 0, 0);

    // –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 10:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (now.getHours() >= 10) {
      nextCheck.setDate(nextCheck.getDate() + 1);
    }

    return format(nextCheck, "d MMMM yyyy, HH:mm", { locale: ru });
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  private getMillisecondsUntilNextCheck(): number {
    const now = new Date();
    const nextCheck = new Date();
    nextCheck.setHours(10, 0, 0, 0);

    // –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 10:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (now.getHours() >= 10) {
      nextCheck.setDate(nextCheck.getDate() + 1);
    }

    return nextCheck.getTime() - now.getTime();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const subscriptionNotificationService =
  new SubscriptionNotificationService();
