generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  isAdmin          Boolean        @default(false)
  username         String         @unique
  avatarUrl        String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  chatId           String?
  registrationDate DateTime?
  subscriptions    Subscription[]
  isActive         Boolean        @default(true)
}

model Subscription {
  id        String      @id @default(cuid())
  type      ContentType
  active    Boolean     @default(true)
  startDate DateTime    @default(now())
  endDate   DateTime
  userId    String
  user      User        @relation(fields: [userId], references: [id])
}

model Folder {
  id          String      @id @default(cuid())
  name        String
  about       String?
  description String?
  type        ContentType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  topics      Topic[]
}

model Topic {
  id          String      @id @default(cuid())
  name        String
  about       String?
  description String?
  folderId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  type        ContentType
  lessons     Lesson[]
  folder      Folder      @relation(fields: [folderId], references: [id])
}

model Lesson {
  id                     String      @id @default(cuid())
  name                   String
  about                  String?
  description            String?
  tasks                  Json[]
  orderNumber            Int
  views                  Int         @default(0)
  isSubscriptionRequired Boolean     @default(true)
  topicId                String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  type                   ContentType
  videoId                String
  topic                  Topic       @relation(fields: [topicId], references: [id])

  @@index([isSubscriptionRequired, orderNumber])
}

model Broadcast {
  id          String   @id @default(cuid())
  name        String?  // название рассылки для админа
  status      BroadcastStatus @default(PENDING)
  
  // Настройки сообщения
  text               String
  fileId             String?             // Telegram file_id для фото или видео
  buttonText         String?
  buttonUrl          String?
  parseMode          String?  @default("HTML")
  disableWebPreview  Boolean  @default(false)
  
  // Настройки рассылки
  delayMs            Int      @default(100)
  skipInactive       Boolean  @default(true)
  retryOnRateLimit   Boolean  @default(true)
  
  // Простая статистика
  totalUsers    Int      @default(0)
  successCount  Int      @default(0)
  errorCount    Int      @default(0)
  skippedCount  Int      @default(0)
  
  // Логи ошибок (JSON массив для критичных ошибок)
  errorLog      Json[]   @default([])
  
  createdAt DateTime @default(now())
  startedAt DateTime?
  completedAt DateTime?
}

enum ContentType {
  player
  coach
  parent
}

enum BroadcastStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}
